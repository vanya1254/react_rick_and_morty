{"version":3,"file":"static/js/Character.3006ff6c.chunk.js","mappings":"+PAeA,MAmDA,EAnD4BA,KAC1B,MAAMC,GAAWC,EAAAA,EAAAA,MACX,GAAEC,IAAOC,EAAAA,EAAAA,MAETC,EAASC,EAAAA,QAAa,GACtBC,EAAaD,EAAAA,QAAa,IAE1B,QAAEE,IAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IAC1B,OAAEC,IAAWF,EAAAA,EAAAA,IAAYG,EAAAA,GA4B/B,OAlBAN,EAAAA,WAAgB,KACdO,OAAOC,SAAS,EAAG,GAEdT,EAAOU,SAXMC,iBACZf,GAASgB,EAAAA,EAAAA,IAAc,CAAEd,GAAIe,OAAOf,KAAyB,EAWjEgB,GAGFd,EAAOU,SAAU,EACjBR,EAAWQ,SAAU,CAAI,GACxB,CAACd,EAAUgB,EAAAA,GAAed,IAE7BG,EAAAA,WAAgB,KACTC,EAAWQ,SAhBGC,iBACbf,GAASmB,EAAAA,EAAAA,IAAe,CAAEZ,YAAW,EAgBzCa,GAEFd,EAAWQ,SAAU,CAAK,GACzB,CAACd,EAAUmB,EAAAA,GAAgBZ,KAG5Bc,EAAAA,EAAAA,KAAA,WAASC,UAAU,kBAAiBC,UAClCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gBAAeC,SAChB,cAAXb,GACCW,EAAAA,EAAAA,KAACG,EAAAA,GAAO,IACK,YAAXd,GACFW,EAAAA,EAAAA,KAACI,EAAAA,GAAe,IAEhB,MAGI,C","sources":["pages/Character.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport { useAppDispatch } from \"../redux/store\";\r\n\r\nimport { fetchCardById } from \"../redux/slices/card/slice\";\r\nimport { CardSliceState } from \"../redux/slices/card/types\";\r\nimport { cardSelector } from \"../redux/slices/card/selectors\";\r\n\r\nimport { fetchCharacter } from \"../redux/slices/character/slice\";\r\nimport { characterSelector } from \"../redux/slices/character/selectors\";\r\n\r\nimport { CardBig, CardBigSkeleton } from \"../components/\";\r\n\r\nconst Character: React.FC = () => {\r\n  const dispatch = useAppDispatch();\r\n  const { id } = useParams();\r\n\r\n  const isCard = React.useRef(false);\r\n  const isEpisodes = React.useRef(false);\r\n\r\n  const { episode } = useSelector(cardSelector);\r\n  const { status } = useSelector(characterSelector);\r\n\r\n  const getCardById = async () => {\r\n    await dispatch(fetchCardById({ id: Number(id) } as CardSliceState));\r\n  };\r\n\r\n  const getCharacter = async () => {\r\n    await dispatch(fetchCharacter({ episode }));\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n\r\n    if (!isCard.current) {\r\n      getCardById();\r\n    }\r\n\r\n    isCard.current = true;\r\n    isEpisodes.current = true;\r\n  }, [dispatch, fetchCardById, id]);\r\n\r\n  React.useEffect(() => {\r\n    if (!isEpisodes.current) {\r\n      getCharacter();\r\n    }\r\n    isEpisodes.current = false;\r\n  }, [dispatch, fetchCharacter, episode]);\r\n\r\n  return (\r\n    <section className=\"bottom__wrapper\">\r\n      <div className=\"bottom__inner\">\r\n        {status === \"fulfilled\" ? (\r\n          <CardBig />\r\n        ) : status === \"pending\" ? (\r\n          <CardBigSkeleton />\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Character;\r\n"],"names":["Character","dispatch","useAppDispatch","id","useParams","isCard","React","isEpisodes","episode","useSelector","cardSelector","status","characterSelector","window","scrollTo","current","async","fetchCardById","Number","getCardById","fetchCharacter","getCharacter","_jsx","className","children","CardBig","CardBigSkeleton"],"sourceRoot":""}